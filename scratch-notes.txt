Installing fflib-apex-mocks and fflib-apex-common:

http://nickworth.com/packaging-aep-into-salesforce-dx/

=======


IDs in Harvest are marked as "Integer" - however JSON doesn't clearly define what an integer is (beyond a whole number).

https://stackoverflow.com/questions/13502398/json-integers-limit-on-size

It looks like the defacto definition is -(2^53 + 1) to 2^53 + 1


https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_primitives.htm

Integer in SF is -(2^31 + 1) through to 2^31 - 1
This should be enough, but we cannot be sure!
Harvest API doesn't define an Integer value!

Long is a better choice: -(2^63 + 1) through to 2^63 - 1

But SF Objects use "Number" or "Text"

With number formatting, may be best to use text and control input to it

No, we can use Number with 18 digits and 0 decimal places - more than enough


On Harvest ID entries:

Listed as Integer by Harvest API v2

Should be Number(18,0)

---


Consideration for enabling audit fields - https://help.salesforce.com/articleView?id=Considerations-before-having-Create-Audit-Fields-enabled&language=en_US&type=1

Permissions Required to set Audit Fields: "Modify All Data"

- Use a permission set to contain the data import user permissions

----


Task in app and Harvest is called "Time Tracker Task"

NOTE: I did not map to the Standard SF "Task" object. The behaviour of this object is different to the specifications as well as Harvest's view of a Task. So, I have called the custom object in SalesForce a "Time Tracker Task"

====

**** Missing: External Reference from Time Entry object

external_reference   object   An object containing the id, group_id, permalink, service, and service_icon_url of the associated external reference.

https://www.getharvest.com/blog/2015/11/be-transparent-and-accurate-when-tracking-time-in-other-apps/



====

**** Missing: Invoice from Time Entry object

external_reference   object   An object containing the id, group_id, permalink, service, and service_icon_url of the associated external reference.

https://www.getharvest.com/blog/2015/11/be-transparent-and-accurate-when-tracking-time-in-other-apps/

invoice   object   Once the time entry has been invoiced, this field will include the associated invoiceâ€™s id and number.

=

BETA field warning

Time Custom Field (Beta)

Started Time and Ended Time on the Time Entry object is a Time custom field.

NOTE: This is a new object field type and is still marked as BETA.


====

Created At and Updated At field

Many of the Harvest API data models include "Created At" and "Updated At" fields, these relate to the SF admin fields. They may be populated by Data Loading.

ACCOUNT AND CONTACT (Harvest: Clients and Client Contacts)

However, on the Account and contact standard SF Objects I have included them as separate fields.

Discussion needed if these should use the SF Admin fields or not.

====

OAuth credentials for TimeTracker App

See: ../credentials/TimeTrackerCredentials.txt


===

TODO: Review customised field lists. Do we need to put in any validation rules, etc or any modifications for this project to be complete for testing?

TODO: Ensure API is covered off enough for a 1:1 mapping to Harvest API
TODO: Check the Harvest applicable methods associated with each object to ensure 1:1 mappings work.
TODO: Check Record Names for custom objects - review and make sure they are good

TODO: Integration (CI) and Unit Testing - "Architect it with the the understanding that this app will be 50 times bigger in functionality (if development had continued)"
FINISH: https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_connected_app

===

Scratch org permission sets

Use these to generate app permissions

Account - default + fax + Harvest fields

====

Generate Scratch Org users for testing

- These users will only be used for testing
- Not present in production orgs

Develop normally, but ensure all unit testing and integration testing (Travis CI) is entered for submission.

BEWARE:

The current permission set gives read access to all Project fields. Need to programatically enforce security over record access.


WARNING - READ LEVEL FIELD ACCESS GRANTED


====


NOTE FOR REVIEWER

I have used a de-facto naming convention of <field name>-<external api>
where "external api" mean the name or abbreviation for external data model.

The Harvest API v2 data model is labelled as "Harvest"

E.g. the Harvest ID field gets named: ID_Harvest

E.g. Other Field: Other_Field_Harvest
---

===

Current objects handled:

Account
Contact
Project
Time Entry
Time Tracker Task
Time Tracker Task Assignment

TODO: REMOVE ALL CHANGES TO CONTACTS - NOT NEEDED

=====

IMPORTANT NOTE: UNUSED HARVEST FIELDS

I do not need to include all harvest fields, but as many as possible would be good.

E.g. Update a contact

Updates the specific contact by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a contact object and a 200 OK response code if the call succeeded.



====


Bill_by on a Project:

Project
Tasks
People
none

Budget by on a Project:

task
task_fee
person

The method by which the project is budgeted.
Options:
project (Hours Per Project)
project_cost (Total Project Fees)
task (Hours Per Task)
task_fees (Fees Per Task)
person (Hours Per Person)
none (No Budget)

====

NOTE: CREATING TRIGGERS

When I created a trigger in the org a `sfdx force:source:pull` there are no changes pulled from the scratch org to the local directory.

However, when the trigger already exists in the scratch org, and I `sfdx force:source:push` it to the scratch org from the local directory, it does so without error or warning. The corresponding trigger in the scratch org is overwritten by the local version.


Best practice:

In SFDX and local editing with VCS (Versioning Control Version e.g. `git`) use:

`sfdx force:apex:triggers:create -n myGreatTriggerName -d force-app/main/default/triggers`

Other elements also:
TODO: more sfdx force:apex examples



When creating Apex code, use sfdx cli commands

Hmmm... sometimes even the classes created with sfdx aren't picked up :/

====

Time Entry:

NOT Matching field: timer_started_at
Field if only needed if tracking by duration.

Leaving it on the object, but ignoring it for now. Our time sheet entries are filled out with start and end times.


NOTE: A time entry cannot span multiple days.
I think this is a limitation on the Harvest system too


====

SELECT ID, Project__c, Project__r.Client__c, Client__c, User__c, User__r.Name, Spent_Date__c
FROM Time_Entry__c

SELECT Id, Name, Client__c
FROM Project__c


===

TESTING NOTES

We make 1 client per project

Client naming convention:
Project naming convention:

User naming conventions:

'timetracker\%@blackthorn.com'
